// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  empresa
  medico
  cliente
}

enum AppointmentStatus {
  scheduled
  cancelled
  completed
  no_show
  rescheduled
}

model User {
  userId   Int     @id @default(autoincrement())
  name     String
  surname  String?
  email    String  @unique
  password String
  role     Role    @default(cliente)

  // üì± Contatos e identifica√ß√£o
  celular  String?
  whatsapp String?
  nif      String?

  // üë§ Informa√ß√µes pessoais
  idade  Int?
  genero String?

  // üë®‚Äç‚öïÔ∏è Dados opcionais de m√©dico
  crm String?

  // üè¢ Rela√ß√£o com empresa (self-relation)
  empresaId Int?
  empresa   User?  @relation("EmpresaMedicos", fields: [empresaId], references: [userId])
  medicos   User[] @relation("EmpresaMedicos")

  // üîó Rela√ß√µes
  specialties          Specialty[]   @relation("MedicoSpecialties")
  appointmentsAsClient Appointment[] @relation("ClientAppointments")
  appointmentsAsMedico Appointment[] @relation("MedicoAppointments")

  // ‚è∞ Sistema
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // ‚è© RELA√á√ÉO COM REFRESH TOKENS (novo campo inverso)
  refreshTokens RefreshToken[]
}

model Specialty {
  specialtyId Int    @id @default(autoincrement())
  name        String // Ex: Cardiologia, Est√©tica, Dentista

  // üîó Rela√ß√µes
  medicos User[] @relation("MedicoSpecialties")
}

model Appointment {
  appointmentId Int               @id @default(autoincrement())
  startsAt      DateTime // Data/hora de in√≠cio (UTC)
  endsAt        DateTime? // Opcional, √∫til para dura√ß√£o vari√°vel
  status        AppointmentStatus @default(scheduled)
  notes         String?

  // üîó Rela√ß√µes
  clientId Int
  medicoId Int

  client User @relation("ClientAppointments", fields: [clientId], references: [userId])
  medico User @relation("MedicoAppointments", fields: [medicoId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([medicoId, startsAt]) // impede double-booking em slots discretos
  // √çndices para performance e preven√ß√£o de conflitos (em slots fixos)
  @@index([medicoId, startsAt])
  @@index([clientId, startsAt])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  tokenHash String
  userId    Int
  user      User     @relation(fields: [userId], references: [userId]) // lado 1
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  @@index([userId])
}
